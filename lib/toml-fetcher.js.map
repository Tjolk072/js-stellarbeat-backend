{"version":3,"file":"toml-fetcher.js","sourceRoot":"","sources":["../src/toml-fetcher.ts"],"names":[],"mappings":";;;AACA,iCAA0B;AAC1B,6BAA6B;AAEhB,QAAA,qBAAqB,GAAG,GAAG,GAAG,IAAI,CAAC;AAEhD,MAAa,WAAW;IAAxB;QACc,eAAU,GAAsB,IAAI,GAAG,EAAkB,CAAC,CAAC,qDAAqD;IAgC9H,CAAC;IA9BS,KAAK,CAAC,IAAU;;YAClB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC7C;YACD,IAAI;gBACA,IAAI,QAAQ,GAAQ,MAAM,eAAK,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC7F,IAAI,MAAM,GAAW,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAElD,IAAI,MAAM,KAAK,SAAS,EAAE;oBACtB,OAAO,SAAS,CAAC;iBACpB;gBAED,IAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE;oBAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;iBACtC;gBAED,IAAI,gBAAgB,GAAQ,MAAM,eAAK,CAAC,GAAG,CAAC,UAAU,GAAG,MAAM,GAAG,2BAA2B,EAAE;oBAC3F,gBAAgB,EAAE,6BAAqB;oBACvC,OAAO,EAAE,IAAI;iBAChB,CAAC,CAAC;gBAEH,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACnD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBAExC,OAAO,UAAU,CAAC;aAErB;YAAC,OAAO,GAAG,EAAE;gBACV,OAAO,SAAS,CAAC;aACpB;QACL,CAAC;KAAA;CACJ;AAjCD,kCAiCC","sourcesContent":["import {Node} from \"@stellarbeat/js-stellar-domain\";\nimport axios from \"axios\";\nimport * as toml from \"toml\";\n\nexport const STELLAR_TOML_MAX_SIZE = 100 * 1024;\n\nexport class TomlFetcher {\n    protected _tomlCache:Map<string,Object> = new Map<string, Object>(); //multiple nodes can have the same domain & toml file\n\n    async fetch(node: Node): Promise<object | undefined> {\n        if (!process.env.HORIZON_URL) {\n            throw new Error('Horizon not configured');\n        }\n        try {\n            let response: any = await axios.get(process.env.HORIZON_URL + '/accounts/' + node.publicKey);\n            let domain: string = response.data['home_domain'];\n\n            if (domain === undefined) {\n                return undefined;\n            }\n\n            if(this._tomlCache.get(domain) !== undefined) {\n                return this._tomlCache.get(domain);\n            }\n\n            let tomlFileResponse: any = await axios.get('https://' + domain + '/.well-known/stellar.toml', {\n                maxContentLength: STELLAR_TOML_MAX_SIZE,\n                timeout: 2000\n            });\n\n            let tomlObject = toml.parse(tomlFileResponse.data);\n            this._tomlCache.set(domain, tomlObject);\n\n            return tomlObject;\n\n        } catch (err) {\n            return undefined;\n        }\n    }\n}"]}