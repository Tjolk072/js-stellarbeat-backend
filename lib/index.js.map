{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,OAAO;AACP,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;AAE3B,uDAAuD;AACvD,mCAAmC;AACnC,uDAAiD;AAGjD,MAAM,eAAe,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAC3D,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,MAAM,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAC;AAE5C,MAAM,MAAM,GAAG,GAAS,EAAE;IACtB,IAAI,KAAK,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAC;IAChD,IAAI,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;IACpC,IAAI,yBAAyB,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC;IACpE,IAAG,CAAC,yBAAyB;QACzB,MAAM,iCAAiC,CAAC;IAE5C,GAAG,CAAC,GAAG,CAAC,UAAU,GAAoB,EAAE,GAAqB,EAAE,IAA0B;QACrF,GAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,gDAAgD,CAAC,CAAC;QAC7F,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IAEJ,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,EAAE,IAAI;QAC3B,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EACvB;YACE,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAC,OAAO,CAAC,CAAC;SAC7B;QACD,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,gBAAgB,CAAC,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;IAElF,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAoB,EAAE,GAAqB,EAAE,EAAE;QACjE,GAAG,CAAC,SAAS,CAAC,eAAe,EAAE,kBAAkB,GAAG,EAAE,CAAC,CAAC,CAAC,eAAe;QACxE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACnB,CAAC,CAAC,CAAC;IACH,GAAG,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAO,GAAoB,EAAE,GAAqB,EAAE,EAAE;QAC7E,IAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,yBAAyB,EAAC;YAChD,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC1B,OAAO;SACV;QAED,KAAK,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAC;QAC5C,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC/B,CAAC,CAAA,CAAC,CAAC;IAEH,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAA,CAAC;AAEF,MAAM,EAAE,CAAC","sourcesContent":["//@flow\nrequire('dotenv').config();\n\nimport * as swaggerUiExpress from 'swagger-ui-express';\nimport * as express from 'express';\nimport {NodeRepository} from \"./node-repository\";\n\n\nconst swaggerDocument = require('../swagger/swagger.json');\nconst api = express();\nconst nodeRepository = new NodeRepository();\n\nconst listen = async () => {\n    let nodes = await nodeRepository.findAllNodes();\n    let port = process.env.PORT || 3000;\n    let backendApiClearCacheToken = process.env.BACKEND_API_CACHE_TOKEN;\n    if(!backendApiClearCacheToken)\n        throw \"Error: api token not configured\";\n\n    api.use(function (req: express.Request, res: express.Response, next: express.NextFunction) {\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n        next();\n    });\n\n   api.use(function (req, res, next) {\n        if (req.url.match(/^\\/$/)\n        ) {\n            res.redirect(301,'/docs');\n        }\n        next();\n    });\n\n    api.use('/docs', swaggerUiExpress.serve, swaggerUiExpress.setup(swaggerDocument));\n\n    api.get('/v1/nodes', (req: express.Request, res: express.Response) => {\n        res.setHeader('Cache-Control', 'public, max-age=' + 30); // cache header\n        res.send(nodes)\n    });\n    api.get('/v1/clear-cache', async (req: express.Request, res: express.Response) => {\n        if(req.param(\"token\") !== backendApiClearCacheToken){\n            res.send(\"invalid token\");\n            return;\n        }\n\n        nodes = await nodeRepository.findAllNodes();\n        res.send(\"cache cleared!\");\n    });\n\n    api.listen(port, () => console.log('api listening on port: ' + port));\n};\n\nlisten();"]}