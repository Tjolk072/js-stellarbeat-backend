{"version":3,"file":"update-nodes.js","sourceRoot":"","sources":["../../src/commands/update-nodes.ts"],"names":[],"mappings":";;;AAAA,OAAO;AACP,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;AAC3B,wDAAkD;AAClD,oCAAqC;AACrC,kFAA6D;AAE7D,iCAA0B;AAC1B,+BAA+B;AAC/B,uCAAuC;AAEvC,MAAM,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAC,CAAC,CAAC;AAE3C,MAAM,gBAAgB,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAE3D,IAAI,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAC;AAC1C,wCAAwC;AACxC,GAAG,EAAE,CAAC;AAEN,SAAe,GAAG;;QACd,OAAM,IAAI,EAAE;YACR,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAGxB,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;YACzD,IAAI,SAAS,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAC;YAEpD,IAAI,OAAO,GAAG,IAAI,iCAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAEtC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,IAAI,KAAK,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC3C,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,sCAAsC;YAEpF,KAAK,GAAG,yBAAyB,CAAC,KAAK,CAAC,CAAC;YAGzC,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;YACpE,KAAK,GAAG,MAAM,wBAAwB,CAAC,KAAK,CAAC,CAAC;YAE9C,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,IAAI,WAAW,GAAG,IAAI,mBAAW,EAAE,CAAC;YAEpC,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAM,IAAI,EAAC,EAAE;gBACjE,IAAI;oBACA,IAAI,IAAI,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAC7C,IAAG,IAAI,KAAK,SAAS,EAAE;wBACnB,IAAI,IAAI,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;wBACzD,IAAG,IAAI,KAAG,SAAS,EAAC;4BAChB,IAAG,IAAI,CAAC,IAAI,KAAG,IAAI,EAAE;gCACjB,MAAM,CAAC,cAAc,CAAC,0CAA0C,GAAG,IAAI,GAAG,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;6BAC/G;4BACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;yBACpB;qBACJ;iBACJ;gBAAC,OAAO,CAAC,EAAE;oBACR,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;iBAC9B;YACL,CAAC,CAAA,CAAC,CAAC,CAAC;YAEJ,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;YAC9C,KAAK,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;YAElC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpC,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;YAE9C,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;YACxD,8GAA8G;YAC9G,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YAC1C,MAAM,cAAc,CAAC,cAAc,EAAE,CAAC;YACtC,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;YAC/C,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAM,IAAI,EAAC,EAAE;gBACrC,IAAI;oBACA,MAAM,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACtC;gBAAC,OAAO,CAAC,EAAE;oBACR,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;iBAC9B;YACL,CAAC,CAAA,CAAC,CAAC,CAAC;YAEJ,IAAI,uBAAuB,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;YAChE,IAAI,yBAAyB,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC;YAEpE,IAAI,CAAC,yBAAyB,IAAI,CAAC,uBAAuB,EAAE;gBACxD,MAAM,8BAA8B,CAAC;aACxC;YAED,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACzC,MAAM,eAAK,CAAC,GAAG,CAAC,uBAAuB,GAAG,SAAS,GAAG,yBAAyB,CAAC,CAAC;YACjF,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YAExC,IAAI,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;YAC/C,IAAI,gBAAgB,EAAE;gBAClB,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;gBAC/C,MAAM,eAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;aACrC;YAED,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;SACrC;IACL,CAAC;CAAA;AAED,SAAe,wBAAwB,CAAC,KAAa;;QACjD,IAAI,cAAc,GAAG,MAAM,gBAAgB,CAAC,WAAW,EAAE,CAAC;QAE1D,KAAK,CAAC,OAAO,CAAC,CAAC,IAAU,EAAE,EAAE;YACzB,IAAI,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,SAAe,EAAE,EAAE;gBACpD,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,SAAS,CAAC;YAClD,CAAC,CAAC,CAAC;YAEH,IAAI,SAAS,EAAE;gBACX,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;gBAC3B,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;aAC9B;QAEL,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACjB,CAAC;CAAA;AAED,SAAe,YAAY,CAAC,KAAa;;QAErC,IAAI,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;YACvC,YAAY,CAAC;YACb,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAO,IAAU,EAAE,EAAE;YACtD,MAAM,CAAC,cAAc,CAAC,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;YAClE,IAAI,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;YAC/C,IAAI,CAAC,SAAS,EAAE;gBACZ,MAAM,+BAA+B,CAAC;aACzC;YAED,IAAI,GAAG,GAAG,yBAAyB,GAAG,IAAI,CAAC,EAAE,GAAG,cAAc,GAAG,SAAS,CAAC;YAC3E,IAAI,eAAe,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;YAEnC,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC;YAC9C,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC;YAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACjC,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC;YACxC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC;YAC1C,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YAC3C,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;QAChD,CAAC,CAAA,CAAC,CAAC,CAAC;QAEJ,OAAO,KAAK,CAAC;IACjB,CAAC;CAAA;AAED,SAAe,WAAW,CAAC,KAAa;;QACpC,IAAI,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;QAC7C,IAAI,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;QACxD,IAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;QAC7C,IAAI,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;QACvC,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,kCAAkC,CAAC;SAC7C;QACD,IAAI,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAE7B,IAAI,MAAM,GAAG;YACT,MAAM,EAAE,UAAU;YAClB,GAAG,EAAE,WAAW,GAAG,GAAG;kBAChB,WAAW,CAAC,WAAW,EAAE;kBACzB,GAAG,GAAG,WAAW,CAAC,cAAc,CAAC,OAAO,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,CAAC;kBAC3D,GAAG,GAAG,WAAW,CAAC,WAAW,EAAE;kBAC/B,OAAO;YACb,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;SAC9B,CAAC;QAEF,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC;YAChB,WAAW,EAAE,WAAW;YACxB,eAAe,EAAE,eAAe;SACnC,CAAC,CAAC;QAEH,OAAO,MAAM,EAAE,CAAC,MAAM,CAAC,MAAa,CAAC,CAAC,OAAO,EAAE,CAAC;IACpD,CAAC;CAAA;AAED,SAAS,yBAAyB,CAAC,KAAa;IAC5C,wIAAwI;IACxI,oCAAoC;IACpC,IAAI,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1D,IAAI,mBAAmB,GAAY,EAAE,CAAC;IACtC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;QAElC,sCAAsC;QACtC,IAAI,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;YAE7C,uCAAuC;YACvC,IAAI,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC7C,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACrC;SACJ;IACL,CAAC,CAAC,CAAC;IAEH,mBAAmB,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;QAC7C,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,kBAAkB,CAAC,CAAC;QAC1D,IAAI,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,KAAK,kBAAkB,CAAC,CAAC;QAEjF,IAAI,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAG,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,UAAU,CAAC,cAAc,EAAE;gBAC7D,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAChC,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;aAClC;iBAAM;gBACH,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;aAC1C;SACJ;QAED,IAAI,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAE,CAAC;QAC/F,IAAG,YAAY,KAAK,SAAS,EAAE;YAC3B,UAAU,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;SACvC;QAED,IAAI,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;QAC9F,IAAG,YAAY,KAAK,SAAS,EAAE;YAC3B,UAAU,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;SACvC;QAED,IAAI,eAAe,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC;QAC3H,IAAG,eAAe,KAAK,SAAS,EAAE;YAC9B,UAAU,CAAC,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC;SAChD;QAED,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YACnC,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACzC,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;gBACZ,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC1B;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["//@flow\nrequire('dotenv').config();\nimport {NodeRepository} from \"../node-repository\";\nimport {TomlService} from \"../index\";\nimport {Crawler} from \"@stellarbeat/js-stellar-node-crawler\";\nimport {Node} from \"@stellarbeat/js-stellar-domain\";\nimport axios from \"axios\";\nimport * as AWS from 'aws-sdk';\nimport * as Sentry from \"@sentry/node\";\n\nSentry.init({dsn: process.env.SENTRY_DSN});\n\nconst stellarDashboard = require(\"./../stellar-dashboard\");\n\nlet nodeRepository = new NodeRepository();\n// noinspection JSIgnoredPromiseFromCall\nrun();\n\nasync function run() {\n    while(true) {\n        console.time('backend');\n\n\n        console.log(\"[MAIN] Fetching known nodes from database\");\n        let nodesSeed = await nodeRepository.findAllNodes();\n\n        let crawler = new Crawler(true, 5000);\n\n        console.log(\"[MAIN] Starting Crawler\");\n        let nodes = await crawler.crawl(nodesSeed);\n        nodes = nodes.filter(node => node.publicKey); //filter out nodes without public keys\n\n        nodes = removeDuplicatePublicKeys(nodes);\n\n\n        console.log(\"[MAIN] Starting map to stellar dashboard information\");\n        nodes = await mapStellarDashboardNodes(nodes);\n\n        console.log(\"[MAIN] Fetch toml files\");\n        let tomlService = new TomlService();\n\n        await Promise.all(nodes.filter(node => node.active).map(async node => {\n            try {\n                let toml = await tomlService.fetchToml(node);\n                if(toml !== undefined) {\n                    let name = tomlService.getNodeName(node.publicKey, toml);\n                    if(name!==undefined){\n                        if(node.name!==name) {\n                            Sentry.captureMessage(\"New node name found through toml. Name: \" + name + \". Publickey: \" + node.publicKey);\n                        }\n                        node.name = name;\n                    }\n                }\n            } catch (e) {\n                Sentry.captureException(e);\n            }\n        }));\n\n        console.log(\"[MAIN] Starting geo data fetch\");\n        nodes = await fetchGeoData(nodes);\n\n        console.log(\"[MAIN] Archive to S3\");\n        await archiveToS3(nodes);\n        console.log('[MAIN] Archive to S3 completed');\n\n        console.log(\"[MAIN] Adding/updating nodes in database\");\n        //todo: need a way to handle nodes that change public keys. Switching back to pruning db until this is solved.\n        console.log(\"[MAIN] Truncating database\");\n        await nodeRepository.deleteAllNodes();\n        console.log(\"[MAIN] Adding nodes to database\");\n        await Promise.all(nodes.map(async node => {\n            try {\n                await nodeRepository.addNode(node);\n            } catch (e) {\n                Sentry.captureException(e);\n            }\n        }));\n\n        let backendApiClearCacheUrl = process.env.BACKEND_API_CACHE_URL;\n        let backendApiClearCacheToken = process.env.BACKEND_API_CACHE_TOKEN;\n\n        if (!backendApiClearCacheToken || !backendApiClearCacheUrl) {\n            throw \"Backend cache not configured\";\n        }\n\n        console.log('[MAIN] clearing api cache');\n        await axios.get(backendApiClearCacheUrl + \"?token=\" + backendApiClearCacheToken);\n        console.log('[MAIN] api cache cleared');\n\n        let deadManSwitchUrl = process.env.DEADMAN_URL;\n        if (deadManSwitchUrl) {\n            console.log('[MAIN] Contacting deadmanswitch');\n            await axios.get(deadManSwitchUrl);\n        }\n\n        console.timeEnd('backend');\n        console.log(\"end of backend run\");\n    }\n}\n\nasync function mapStellarDashboardNodes(nodes: Node[]) {\n    let dashboardNodes = await stellarDashboard.importNodes();\n\n    nodes.forEach((node: Node) => {\n        let knownNode = dashboardNodes.find((knownNode: Node) => {\n            return node.publicKey === knownNode.publicKey;\n        });\n\n        if (knownNode) {\n            node.name = knownNode.name;\n            node.host = knownNode.host;\n        }\n\n    });\n\n    return nodes;\n}\n\nasync function fetchGeoData(nodes: Node[]) {\n\n    let nodesToProcess = nodes.filter((node) => {\n        \"use strict\";\n        return node.geoData.latitude === undefined;\n    });\n\n    await Promise.all(nodesToProcess.map(async (node: Node) => {\n        Sentry.captureMessage(\"fetching geo data for: \" + node.publicKey);\n        let accessKey = process.env.IPSTACK_ACCESS_KEY;\n        if (!accessKey) {\n            throw \"ERROR: ipstack not configured\";\n        }\n\n        let url = \"http://api.ipstack.com/\" + node.ip + '?access_key=' + accessKey;\n        let geoDataResponse = await axios.get(url);\n        let geoData = geoDataResponse.data;\n\n        node.geoData.countryCode = geoData.country_code;\n        node.geoData.countryName = geoData.country_name;\n        node.geoData.regionCode = geoData.region_code;\n        node.geoData.regionName = geoData.region_name;\n        node.geoData.city = geoData.city;\n        node.geoData.zipCode = geoData.zip_code;\n        node.geoData.timeZone = geoData.time_zone;\n        node.geoData.latitude = geoData.latitude;\n        node.geoData.longitude = geoData.longitude;\n        node.geoData.metroCode = geoData.metro_code;\n    }));\n\n    return nodes;\n}\n\nasync function archiveToS3(nodes: Node[]) {\n    let accessKeyId = process.env.AWS_ACCESS_KEY;\n    let secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;\n    let bucketName = process.env.AWS_BUCKET_NAME;\n    let environment = process.env.NODE_ENV;\n    if (!accessKeyId) {\n        return \"Not archiving, s3 not configured\";\n    }\n    let currentTime = new Date();\n\n    let params = {\n        Bucket: bucketName,\n        Key: environment + \"/\"\n            + currentTime.getFullYear()\n            + \"/\" + currentTime.toLocaleString(\"en-us\", {month: \"short\"})\n            + \"/\" + currentTime.toISOString()\n            + \".json\",\n        Body: JSON.stringify(nodes)\n    };\n\n    let s3 = new AWS.S3({\n        accessKeyId: accessKeyId,\n        secretAccessKey: secretAccessKey\n    });\n\n    return await s3.upload(params as any).promise();\n}\n\nfunction removeDuplicatePublicKeys(nodes: Node[]):Node[] {\n    //filter out double public keys (nodes that switched ip address, or have the same public key running on different ip's at the same time)\n    //statistics are lost because new ip\n    let publicKeys = nodes.map((node:Node) => node.publicKey);\n    let duplicatePublicKeys:string[] = [];\n    publicKeys.forEach((element, index) => {\n\n        // Find if there is a duplicate or not\n        if (publicKeys.indexOf(element, index + 1) > -1) {\n\n            // Is the duplicate already registered?\n            if (duplicatePublicKeys.indexOf(element) === -1) {\n                duplicatePublicKeys.push(element);\n            }\n        }\n    });\n\n    duplicatePublicKeys.forEach(duplicatePublicKey => {\n        console.log('duplicate publicKey: ' + duplicatePublicKey);\n        let duplicateNodes = nodes.filter(node => node.publicKey === duplicatePublicKey);\n\n        let nodeToKeep = duplicateNodes[0];\n        let nodesToDiscard = [];\n        for(let i=1; i<duplicateNodes.length; i++) {\n            if(duplicateNodes[i].dateDiscovered > nodeToKeep.dateDiscovered) {\n                nodesToDiscard.push(nodeToKeep);\n                nodeToKeep = duplicateNodes[i];\n            } else {\n                nodesToDiscard.push(duplicateNodes[i]);\n            }\n        }\n\n        let nodeWithName = duplicateNodes.find(node => node.name !== undefined && node.name !== null );\n        if(nodeWithName !== undefined) {\n            nodeToKeep.name = nodeWithName.name;\n        }\n\n        let nodeWithHost = duplicateNodes.find(node => node.host !== undefined && node.host !== null);\n        if(nodeWithHost !== undefined) {\n            nodeToKeep.host = nodeWithHost.host;\n        }\n\n        let nodeWithGeoData = duplicateNodes.find(node => node.geoData.longitude !== undefined && node.geoData.longitude !== null);\n        if(nodeWithGeoData !== undefined) {\n            nodeToKeep.geoData = nodeWithGeoData.geoData;\n        }\n\n        nodesToDiscard.forEach(nodeToDiscard => {\n            let index = nodes.indexOf(nodeToDiscard);\n            if (index > -1) {\n                nodes.splice(index, 1);\n            }\n        });\n    });\n\n    return nodes;\n}"]}