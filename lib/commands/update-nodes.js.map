{"version":3,"file":"update-nodes.js","sourceRoot":"","sources":["../../src/commands/update-nodes.ts"],"names":[],"mappings":"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","sourcesContent":["//@flow\nrequire('dotenv').config();\nimport NodeRepository from \"../node-repository\";\nimport {Crawler} from \"@stellarbeat/js-stellar-node-crawler\";\nimport {Node} from \"@stellarbeat/js-stellar-domain\";\nimport axios from\"axios\";\nimport * as AWS from 'aws-sdk';\nimport * as Sentry from \"@sentry/node\";\nSentry.init({ dsn: process.env.SENTRY_DSN });\n\nconst stellarDashboard = require(\"./../stellar-dashboard\");\n\n// noinspection JSIgnoredPromiseFromCall\nrun();\n\nasync function run() {\n    console.time('backend');\n    let notifyDeadManSwitch = process.argv[2] ? process.argv[2] : false;\n\n    console.log(\"[MAIN] Fetching known nodes from database\");\n    let nodesSeed = await NodeRepository.findAllNodes();\n\n    let crawler = new Crawler(true, 5000);\n\n    console.log(\"[MAIN] Starting Crawler\");\n    let nodes = await crawler.crawl(nodesSeed);\n    nodes = nodes.filter(node => node.publicKey); //filter out nodes without public keys\n\n    console.log(\"[MAIN] Starting map to stellar dashboard information\");\n    nodes = await mapStellarDashboardNodes(nodes);\n\n    console.log(\"[MAIN] Starting geo data fetch\");\n    nodes = await fetchGeoData(nodes);\n\n    console.log(\"[MAIN] Archive to S3\");\n    await archiveToS3(nodes);\n    console.log('[MAIN] Archive to S3 completed');\n\n\n    console.log(\"[MAIN] Truncating database\");\n    await NodeRepository.deleteAllNodes();\n    console.log(\"[MAIN] Adding nodes to database\" );\n    await Promise.all(nodes.map(async node => {\n        await NodeRepository.addNode(node);\n    }));\n\n    await NodeRepository.destroyConnection();\n\n    let backendApiClearCacheUrl = process.env.BACKEND_API_CACHE_URL;\n    let backendApiClearCacheToken = process.env.BACKEND_API_CACHE_TOKEN;\n\n    if(!backendApiClearCacheToken || !backendApiClearCacheUrl) {\n        throw \"Backend cache not configured\";\n    }\n\n    console.log('[MAIN] clearing api cache');\n    await axios.get(backendApiClearCacheUrl + \"?token=\" + backendApiClearCacheToken);\n    console.log('[MAIN] api cache cleared');\n\n    if(notifyDeadManSwitch) {\n        console.log('[MAIN] Contacting deadmanswitch');\n        let deadManSwitchUrl = process.env.DEADMAN_URL;\n        if(!deadManSwitchUrl)\n            throw \"error: deadmanswitch url not configured\";\n\n        await axios.get(deadManSwitchUrl);\n    }\n\n    console.timeEnd('backend');\n    console.log(\"end of script\");\n}\n\nasync function mapStellarDashboardNodes(nodes: Node[]) {\n    let dashboardNodes = await stellarDashboard.importNodes();\n\n    nodes.forEach((node:Node) => {\n        let knownNode = dashboardNodes.find((knownNode: Node) => {\n            return node.publicKey === knownNode.publicKey;\n        });\n\n        if (knownNode) {\n            node.name = knownNode.name;\n            node.host = knownNode.host;\n        }\n\n    });\n\n    return nodes;\n}\n\nasync function fetchGeoData(nodes: Node[]) {\n\n    let nodesToProcess = nodes.filter((node) => {\n        \"use strict\";\n        return node.geoData.latitude === undefined;\n    });\n\n    await Promise.all(nodesToProcess.map(async (node:Node) => {\n        let accessKey = process.env.IPSTACK_ACCESS_KEY;\n        if(!accessKey) {\n            throw \"ERROR: ipstack not configured\";\n        }\n\n        let url = \"http://api.ipstack.com/\" + node.ip + '?access_key=' + accessKey;\n        let geoDataResponse = await axios.get(url);\n        let geoData = geoDataResponse.data;\n\n        node.geoData.countryCode = geoData.country_code;\n        node.geoData.countryName = geoData.country_name;\n        node.geoData.regionCode = geoData.region_code;\n        node.geoData.regionName = geoData.region_name;\n        node.geoData.city = geoData.city;\n        node.geoData.zipCode = geoData.zip_code;\n        node.geoData.timeZone = geoData.time_zone;\n        node.geoData.latitude = geoData.latitude;\n        node.geoData.longitude = geoData.longitude;\n        node.geoData.metroCode = geoData.metro_code;\n    }));\n\n    return nodes;\n}\n\nasync function archiveToS3(nodes: Node[]) {\n    let accessKeyId = process.env.AWS_ACCESS_KEY;\n    let secretAccessKey= process.env.AWS_SECRET_ACCESS_KEY;\n    let bucketName = process.env.AWS_BUCKET_NAME;\n    let environment = process.env.NODE_ENV;\n    if(!environment) {\n        throw \"Error: environment not configured\";\n    }\n    let currentTime = new Date();\n\n    let params = {\n        Bucket: bucketName,\n        Key: environment + \"/\"\n            + currentTime.getFullYear()\n            + \"/\" + currentTime.toLocaleString(\"en-us\", { month: \"short\" })\n            + \"/\" + currentTime.toISOString()\n            + \".json\",\n        Body: JSON.stringify(nodes)\n    };\n\n    let s3 = new AWS.S3({\n        accessKeyId: accessKeyId,\n        secretAccessKey: secretAccessKey\n    });\n\n    await s3.upload(params as any).promise();\n}"]}