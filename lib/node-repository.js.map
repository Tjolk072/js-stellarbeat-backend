{"version":3,"file":"node-repository.js","sourceRoot":"","sources":["../src/node-repository.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Knex from 'knex';\nimport {Node} from \"@stellarbeat/js-stellar-domain\";\n\nconst environment = process.env.NODE_ENV || 'development';\nconst flexConfig = require('../knexfile.js');\nconst knex = Knex(flexConfig);\nimport * as Sentry from \"@sentry/node\";\n\nSentry.init({dsn: process.env.SENTRY_DSN});\n\n//@todo typeorm https://github.com/typeorm/typeorm\n\nexport class NodeRepository {\n\n    async findAllNodes() {\n        console.log(\"[DB \" + environment + \"] Finding all nodes\");\n        let nodes: Array<any> = await knex.select('data').from('nodes');\n        return nodes.map(node => {\n            return Node.fromJSON(node.data)\n        });\n    }\n\n    async findByPublicKey(publicKey: string) {\n        console.log(\"[DB \" + environment + \"] Finding toNode: \" + publicKey);\n        let results = await knex('nodes').where({\n            'public_key': publicKey\n        }).select('data');\n        if (results.length === 0) {\n            return null;\n        }\n\n        return Node.fromJSON(results[0].data);\n    }\n\n    async updateOrCreateNodes(nodes: Array<Node>) {\n        await Promise.all(\n            nodes.map(\n                async (node: Node) => {\n                    try {\n                        let foundNode = await this.findByPublicKey(node.publicKey);\n                        if (foundNode) {\n                            await this.updateNode(node);\n                        } else {\n                            await this.addNode(node);\n                        }\n                    } catch (e) {\n                        Sentry.captureException(e);\n                    }\n                }\n            )\n        );\n    }\n\n    async addNode(node: Node) {\n        if (!node.publicKey) {\n            throw new Error(\"cannot persist node without public key\");\n        }\n        await knex('nodes').insert(\n            {\n                public_key: node.publicKey,\n                data: JSON.stringify(node)\n            }\n        );\n    };\n\n    async updateNode(node: Node) {\n        console.log(\"[DB \" + environment + \"] Updating toNode: \" + node.publicKey);\n        await knex('nodes').where('public_key', '=', node.publicKey).update(\n            {\n                data: JSON.stringify(node)\n            }\n        );\n    }\n\n    async destroyConnection() {\n        console.log(\"[DB \" + environment + \"] Destroying connection\");\n        await knex.destroy();\n    }\n}"]}