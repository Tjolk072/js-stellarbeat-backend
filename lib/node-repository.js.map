{"version":3,"file":"node-repository.js","sourceRoot":"","sources":["../src/node-repository.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,sEAAoD;AAEpD,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CAAC;AAC1D,MAAM,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;AAE9B,MAAM,YAAY,GAAG,GAA8B,EAAE;IACjD,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,WAAW,GAAG,qBAAqB,CAAC,CAAC;IAC1D,IAAI,KAAK,GAAc,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/D,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO,wBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACnC,CAAC,CAAC,CAAC;AACP,CAAC,CAAA,CAAC;AAEF,MAAM,cAAc,GAAG,GAAuB,EAAE;IAC5C,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,WAAW,GAAG,sBAAsB,CAAE,CAAC;IAC5D,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;AACnC,CAAC,CAAA,CAAC;AAEF,MAAM,OAAO,GAAG,CAAO,IAAS,EAAgB,EAAE;IAC9C,IAAG,CAAC,IAAI,CAAC,SAAS,EAAC;QACf,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;KAC7D;IACD,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CACtB;QACI,UAAU,EAAE,IAAI,CAAC,SAAS;QAC1B,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;KAC7B,CACJ,CAAC;AACN,CAAC,CAAA,CAAC;AAEF,MAAM,iBAAiB,GAAG,GAAuB,EAAE;IAC/C,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,WAAW,GAAG,yBAAyB,CAAC,CAAC;IAC9D,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;AACzB,CAAC,CAAA,CAAC;AAEF,kBAAe;IACX,cAAc,EAAG,YAAY;IAC7B,SAAS,EAAE,OAAO;IAClB,mBAAmB,EAAE,iBAAiB;IACtC,gBAAgB,EAAE,cAAc;CACnC,CAAC","sourcesContent":["import * as Knex from 'knex';\nimport {Node} from \"@stellarbeat/js-stellar-domain\";\n\nconst environment = process.env.NODE_ENV || 'development';\nconst flexConfig = require('../knexfile.js');\nconst knex = Knex(flexConfig);\n\nconst findAllNodes = async ():Promise<Array<Node>> => {\n    console.log(\"[DB \" + environment + \"] Finding all nodes\");\n    let nodes:Array<any> = await knex.select('data').from('nodes');\n    return nodes.map(node => {\n        return Node.fromJSON(node.data)\n    });\n};\n\nconst deleteAllNodes = async ():Promise<void> => {\n    console.log(\"[DB \" + environment + \"] Deleting all nodes\" );\n    await knex('nodes').truncate();\n};\n\nconst addNode = async (node:Node):Promise<void> => {\n    if(!node.publicKey){\n        throw new Error(\"cannot persist node without public key\");\n    }\n    await knex('nodes').insert(\n        {\n            public_key: node.publicKey,\n            data: JSON.stringify(node)\n        }\n    );\n};\n\nconst destroyConnection = async ():Promise<void> => {\n    console.log(\"[DB \" + environment + \"] Destroying connection\");\n    await knex.destroy();\n};\n\nexport default {\n    'findAllNodes' : findAllNodes,\n    'addNode': addNode,\n    'destroyConnection': destroyConnection,\n    'deleteAllNodes': deleteAllNodes\n};"]}